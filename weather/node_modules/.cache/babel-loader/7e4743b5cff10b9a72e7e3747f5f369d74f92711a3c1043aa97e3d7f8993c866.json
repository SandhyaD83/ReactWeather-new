{"ast":null,"code":"var _jsxFileName = \"/Users/sandhya/Desktop/Perscholas-repos/React-weather/weather/src/components/Hourly.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext } from 'react';\nimport WeatherContext from '../context/WeatherContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Hourly = () => {\n  _s();\n  // const { forecast } = useContext(WeatherContext)\n  // console.log(forecast.list)\n  // //mapping through the list array and destructuring it\n  // const dailyReport = forecast.list.map(({ dt_txt, main: { temp }, weather, wind: { speed } }, id) => {\n\n  //     const date = new Date(dt_txt.split(' ')[0]).toDateString();\n\n  //     // splits and only takes time from dt_txt and converts string to whole number \n  //     const time = parseInt(dt_txt.split(' ')[1], 10);\n  const {\n    findByHour,\n    hourlyResult\n  } = useContext(WeatherContext);\n  findByHour();\n  const hourlyReport = hourlyResult.map(hr => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weatherDetails\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-temp\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: hr.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this), hr.eachHour.map(eh => {\n          {\n            eh.time > 12 ? /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [eh.time - 12, \"pm\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 43\n            }, this) : eh.time === 0 ? /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"12am\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 89\n            }, this) : eh.time === 12 ? /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"12pm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 124\n            }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [eh.time, \"am\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 142\n            }, this);\n          }\n          /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [eh.temp.toFixed(), \"\\xB0F\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 25\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: hourlyReport\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(Hourly, \"jSzRIQEFDIS/hfIUQbq24klO9wc=\");\n_c = Hourly;\nexport default Hourly;\nvar _c;\n$RefreshReg$(_c, \"Hourly\");","map":{"version":3,"names":["React","useState","useContext","WeatherContext","jsxDEV","_jsxDEV","Hourly","_s","findByHour","hourlyResult","hourlyReport","map","hr","className","children","date","fileName","_jsxFileName","lineNumber","columnNumber","eachHour","eh","time","temp","toFixed","_c","$RefreshReg$"],"sources":["/Users/sandhya/Desktop/Perscholas-repos/React-weather/weather/src/components/Hourly.jsx"],"sourcesContent":["import React, { useState, useContext } from 'react'\nimport WeatherContext from '../context/WeatherContext'\n\n\nconst Hourly = () => {\n    // const { forecast } = useContext(WeatherContext)\n    // console.log(forecast.list)\n    // //mapping through the list array and destructuring it\n    // const dailyReport = forecast.list.map(({ dt_txt, main: { temp }, weather, wind: { speed } }, id) => {\n\n    //     const date = new Date(dt_txt.split(' ')[0]).toDateString();\n\n    //     // splits and only takes time from dt_txt and converts string to whole number \n    //     const time = parseInt(dt_txt.split(' ')[1], 10);\n    const { findByHour, hourlyResult } = useContext(WeatherContext)\n\n    findByHour();\n    const hourlyReport = hourlyResult.map((hr) => {\n        return (\n            <div className=\"weatherDetails\">\n                <div className='date-temp'>\n                    <h4>{hr.date}</h4>\n                    {hr.eachHour.map((eh => {\n                        { eh.time > 12 ? (<h4>{eh.time - 12}pm</h4>) : eh.time === 0 ? (<h4>12am</h4>) : eh.time === 12 ? (<h4>12pm</h4>) : (<h4>{eh.time}am</h4>) }\n                        <h4>{eh.temp.toFixed()}°F</h4>\n                    }))}\n                </div>\n                {/* {time > 12 ? (<h4>{hr.time - 12}pm</h4>) : hr.time === 0 ? (<h4>12am</h4>) : hr.time === 12 ? (<h4>12pm</h4>) : (<h4>{hr.time}am</h4>)}\n                    <h4>{hr.temp.toFixed()}°F</h4>  */}\n\n                {/* <div className='weather'>\n                    <img src={`https://openweathermap.org/img/w/${hr.image}.png`} alt=\"\" className='weather-image' />\n                    <h4>{hr.weather}</h4>\n                </div>\n                <div className='wind'>\n                    <img src=\"https://uxwing.com/wp-content/themes/uxwing/download/weather/wind-icon.png\" alt=\"\" className='wind-image' />\n                    <h4>{hr.speed.toFixed()} mph</h4>\n                </div> */}\n\n            </div>\n        )\n\n    })\n\n    return (\n        < div >\n            {hourlyReport}\n        </div >\n    )\n}\n\nexport default Hourly"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AACnD,OAAOC,cAAc,MAAM,2BAA2B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGtD,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA,MAAM;IAAEC,UAAU;IAAEC;EAAa,CAAC,GAAGP,UAAU,CAACC,cAAc,CAAC;EAE/DK,UAAU,EAAE;EACZ,MAAME,YAAY,GAAGD,YAAY,CAACE,GAAG,CAAEC,EAAE,IAAK;IAC1C,oBACIP,OAAA;MAAKQ,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC3BT,OAAA;QAAKQ,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACtBT,OAAA;UAAAS,QAAA,EAAKF,EAAE,CAACG;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAM,EACjBP,EAAE,CAACQ,QAAQ,CAACT,GAAG,CAAEU,EAAE,IAAI;UACpB;YAAEA,EAAE,CAACC,IAAI,GAAG,EAAE,gBAAIjB,OAAA;cAAAS,QAAA,GAAKO,EAAE,CAACC,IAAI,GAAG,EAAE,EAAC,IAAE;YAAA;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,QAAK,GAAIE,EAAE,CAACC,IAAI,KAAK,CAAC,gBAAIjB,OAAA;cAAAS,QAAA,EAAI;YAAI;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,QAAK,GAAIE,EAAE,CAACC,IAAI,KAAK,EAAE,gBAAIjB,OAAA;cAAAS,QAAA,EAAI;YAAI;cAAAE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,QAAK,gBAAKd,OAAA;cAAAS,QAAA,GAAKO,EAAE,CAACC,IAAI,EAAC,IAAE;YAAA;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,QAAM;UAAC;UAC3I,aAAAd,OAAA;YAAAS,QAAA,GAAKO,EAAE,CAACE,IAAI,CAACC,OAAO,EAAE,EAAC,OAAE;UAAA;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK;QAClC,CAAC,CAAE;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IACD;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAaJ;EAGd,CAAC,CAAC;EAEF,oBACId,OAAA;IAAAS,QAAA,EACKJ;EAAY;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACV;AAEf,CAAC;AAAAZ,EAAA,CA7CKD,MAAM;AAAAmB,EAAA,GAANnB,MAAM;AA+CZ,eAAeA,MAAM;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}