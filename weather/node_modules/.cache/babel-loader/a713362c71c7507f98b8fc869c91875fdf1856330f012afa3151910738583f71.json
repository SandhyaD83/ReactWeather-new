{"ast":null,"code":"var _jsxFileName = \"/Users/sandhya/Desktop/Perscholas-repos/React-weather/weather/src/components/Hourly.jsx\";\nimport React from 'react';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Hourly = props => {\n  console.log(props.forecast.list);\n\n  //mapping through the list array and destructuring it\n  const dailyReport = props.forecast.list.map((_ref, id) => {\n    let {\n      dt_txt,\n      main: {\n        temp\n      },\n      weather\n    } = _ref;\n    const dateString = dt_txt;\n    const date = new Date(dt_txt.split(' ')[0]).toDateString();\n\n    // splits and only takes time from dt_txt\n    const time = parseInt(dt_txt.split(' ')[1], 10);\n\n    //converts string to whole number \n    // const time1 = parseInt(time[1], 10)\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: date\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), time > 12 ? /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [time - 12, \"pm\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 31\n      }, this) : time === 0 ? /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"12am\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 71\n      }, this) : time === 12 ? /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"12pm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 103\n      }, this) : /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [time, \"am\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 121\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [Math.round(temp), \"\\xB0F\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `https://openweathermap.org/img/w/${weather[0].icon}.png`,\n        alt: \"\",\n        className: \"image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather[0].main\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this);\n  });\n  console.log(dailyReport);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: dailyReport\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_c = Hourly;\nexport default Hourly;\nvar _c;\n$RefreshReg$(_c, \"Hourly\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Hourly","props","console","log","forecast","list","dailyReport","map","_ref","id","dt_txt","main","temp","weather","dateString","date","Date","split","toDateString","time","parseInt","children","fileName","_jsxFileName","lineNumber","columnNumber","Math","round","src","icon","alt","className","_c","$RefreshReg$"],"sources":["/Users/sandhya/Desktop/Perscholas-repos/React-weather/weather/src/components/Hourly.jsx"],"sourcesContent":["import React from 'react'\nimport { useState } from 'react'\n\nconst Hourly = (props) => {\n    console.log(props.forecast.list)\n\n\n\n\n\n    //mapping through the list array and destructuring it\n    const dailyReport = props.forecast.list.map(({ dt_txt, main: { temp }, weather }, id) => {\n        const dateString = dt_txt;\n\n        const date = new Date(dt_txt.split(' ')[0]).toDateString();\n\n        // splits and only takes time from dt_txt\n        const time = parseInt(dt_txt.split(' ')[1], 10);\n\n        //converts string to whole number \n        // const time1 = parseInt(time[1], 10)\n\n\n\n        return (\n            <div>\n                <h4>{date}</h4>\n                <hr />\n                {time > 12 ? (<h4>{time - 12}pm</h4>) : time === 0 ? (<h4>12am</h4>) : time === 12 ? (<h4>12pm</h4>) : (<h4>{time}am</h4>)}\n                <h3>{Math.round(temp)}Â°F</h3>\n                <img src={`https://openweathermap.org/img/w/${weather[0].icon}.png`} alt=\"\" className='image' />\n                <p>{weather[0].main}</p>\n            </div>\n        )\n\n    })\n\n\n    console.log(dailyReport)\n    return (\n\n        < div >\n\n            {dailyReport}\n\n        </div >\n    )\n}\n\nexport default Hourly"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,MAAM,GAAIC,KAAK,IAAK;EACtBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,QAAQ,CAACC,IAAI,CAAC;;EAMhC;EACA,MAAMC,WAAW,GAAGL,KAAK,CAACG,QAAQ,CAACC,IAAI,CAACE,GAAG,CAAC,CAAAC,IAAA,EAAsCC,EAAE,KAAK;IAAA,IAA5C;MAAEC,MAAM;MAAEC,IAAI,EAAE;QAAEC;MAAK,CAAC;MAAEC;IAAQ,CAAC,GAAAL,IAAA;IAC5E,MAAMM,UAAU,GAAGJ,MAAM;IAEzB,MAAMK,IAAI,GAAG,IAAIC,IAAI,CAACN,MAAM,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,YAAY,EAAE;;IAE1D;IACA,MAAMC,IAAI,GAAGC,QAAQ,CAACV,MAAM,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;;IAE/C;IACA;;IAIA,oBACIlB,OAAA;MAAAsB,QAAA,gBACItB,OAAA;QAAAsB,QAAA,EAAKN;MAAI;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACf1B,OAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,EACLN,IAAI,GAAG,EAAE,gBAAIpB,OAAA;QAAAsB,QAAA,GAAKF,IAAI,GAAG,EAAE,EAAC,IAAE;MAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,GAAIN,IAAI,KAAK,CAAC,gBAAIpB,OAAA;QAAAsB,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,GAAIN,IAAI,KAAK,EAAE,gBAAIpB,OAAA;QAAAsB,QAAA,EAAI;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,gBAAK1B,OAAA;QAAAsB,QAAA,GAAKF,IAAI,EAAC,IAAE;MAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAC1H1B,OAAA;QAAAsB,QAAA,GAAKK,IAAI,CAACC,KAAK,CAACf,IAAI,CAAC,EAAC,OAAE;MAAA;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAC7B1B,OAAA;QAAK6B,GAAG,EAAG,oCAAmCf,OAAO,CAAC,CAAC,CAAC,CAACgB,IAAK,MAAM;QAACC,GAAG,EAAC,EAAE;QAACC,SAAS,EAAC;MAAO;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAChG1B,OAAA;QAAAsB,QAAA,EAAIR,OAAO,CAAC,CAAC,CAAC,CAACF;MAAI;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACtB;EAGd,CAAC,CAAC;EAGFvB,OAAO,CAACC,GAAG,CAACG,WAAW,CAAC;EACxB,oBAEIP,OAAA;IAAAsB,QAAA,EAEKf;EAAW;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAET;AAEf,CAAC;AAAAO,EAAA,GA5CKhC,MAAM;AA8CZ,eAAeA,MAAM;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}