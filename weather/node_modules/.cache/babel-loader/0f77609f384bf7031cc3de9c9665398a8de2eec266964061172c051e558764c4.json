{"ast":null,"code":"var _jsxFileName = \"/Users/sandhya/Desktop/Perscholas-repos/React-weather/weather/src/context/WeatherContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherContext = /*#__PURE__*/createContext({});\nexport const Provider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  //defining a Array variable to store weather data\n  const [weather1, setWeather1] = useState({});\n  const apiKey = \"77d6cae8ed4f306976db5aa9ea844e15\";\n  //function to fetch data from weather using api and store it in the variable weather\n  const getWeather = async searchTerm => {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchTerm}&appid=${apiKey}&units=imperial`);\n      const data = await response.json();\n      console.log(data);\n      setWeather1(data);\n      setStr(\"nothing\");\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  console.log(weather1);\n  const [str, setStr] = useState('');\n  const [forecast, setForecast] = useState({});\n  //function to fetch daily forecast of the selected city using lat and lon values\n  const getForecast = async btnName => {\n    try {\n      const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${weather1.coord.lat}&lon=${weather1.coord.lon}&appid=${apiKey}&units=imperial`);\n      const forecastData = await response.json();\n      console.log(forecastData);\n      setForecast(forecastData);\n      setStr(btnName);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  //Intially renders London weather\n  useEffect(() => {\n    getWeather(\"london\");\n  }, []);\n  console.log(forecast);\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: {\n      weather1,\n      str,\n      forecast,\n      getWeather,\n      getForecast\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n_s(Provider, \"Jt8CgXXzv/gZCeeR3fG/8WGJWBM=\");\n_c = Provider;\nexport default WeatherContext;\nvar _c;\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"names":["createContext","useState","useEffect","jsxDEV","_jsxDEV","WeatherContext","Provider","_ref","_s","children","weather1","setWeather1","apiKey","getWeather","searchTerm","response","fetch","data","json","console","log","setStr","e","error","str","forecast","setForecast","getForecast","btnName","coord","lat","lon","forecastData","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sandhya/Desktop/Perscholas-repos/React-weather/weather/src/context/WeatherContext.jsx"],"sourcesContent":["import { createContext, useState, useEffect } from 'react'\nconst WeatherContext = createContext({});\nexport const Provider = ({ children }) => {\n    //defining a Array variable to store weather data\n    const [weather1, setWeather1] = useState({})\n\n    const apiKey = \"77d6cae8ed4f306976db5aa9ea844e15\"\n    //function to fetch data from weather using api and store it in the variable weather\n    const getWeather = async (searchTerm) => {\n        try {\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchTerm}&appid=${apiKey}&units=imperial`)\n            const data = await response.json();\n            console.log(data)\n            setWeather1(data)\n            setStr(\"nothing\")\n        }\n        catch (e) {\n            console.error(e)\n        }\n\n    }\n    console.log(weather1)\n\n    const [str, setStr] = useState('')\n    const [forecast, setForecast] = useState({})\n    //function to fetch daily forecast of the selected city using lat and lon values\n    const getForecast = async (btnName) => {\n        try {\n            const response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${weather1.coord.lat}&lon=${weather1.coord.lon}&appid=${apiKey}&units=imperial`)\n            const forecastData = await response.json();\n            console.log(forecastData)\n            setForecast(forecastData)\n\n            setStr(btnName)\n        }\n        catch (e) {\n            console.error(e)\n        }\n\n    }\n    //Intially renders London weather\n    useEffect(() => { getWeather(\"london\"); }, [])\n    console.log(forecast)\n\n    return (\n        <WeatherContext.Provider value={{ weather1, str, forecast, getWeather, getForecast }} >\n            {children}\n        </WeatherContext.Provider>\n\n    )\n\n}\nexport default WeatherContext;"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAC1D,MAAMC,cAAc,gBAAGL,aAAa,CAAC,CAAC,CAAC,CAAC;AACxC,OAAO,MAAMM,QAAQ,GAAGC,IAAA,IAAkB;EAAAC,EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC,GAAAF,IAAA;EACjC;EACA,MAAM,CAACG,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE5C,MAAMW,MAAM,GAAG,kCAAkC;EACjD;EACA,MAAMC,UAAU,GAAG,MAAOC,UAAU,IAAK;IACrC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,qDAAoDF,UAAW,UAASF,MAAO,iBAAgB,CAAC;MAC9H,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;MAClCC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;MACjBN,WAAW,CAACM,IAAI,CAAC;MACjBI,MAAM,CAAC,SAAS,CAAC;IACrB,CAAC,CACD,OAAOC,CAAC,EAAE;MACNH,OAAO,CAACI,KAAK,CAACD,CAAC,CAAC;IACpB;EAEJ,CAAC;EACDH,OAAO,CAACC,GAAG,CAACV,QAAQ,CAAC;EAErB,MAAM,CAACc,GAAG,EAAEH,MAAM,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C;EACA,MAAM0B,WAAW,GAAG,MAAOC,OAAO,IAAK;IACnC,IAAI;MACA,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,wDAAuDN,QAAQ,CAACmB,KAAK,CAACC,GAAI,QAAOpB,QAAQ,CAACmB,KAAK,CAACE,GAAI,UAASnB,MAAO,iBAAgB,CAAC;MACnK,MAAMoB,YAAY,GAAG,MAAMjB,QAAQ,CAACG,IAAI,EAAE;MAC1CC,OAAO,CAACC,GAAG,CAACY,YAAY,CAAC;MACzBN,WAAW,CAACM,YAAY,CAAC;MAEzBX,MAAM,CAACO,OAAO,CAAC;IACnB,CAAC,CACD,OAAON,CAAC,EAAE;MACNH,OAAO,CAACI,KAAK,CAACD,CAAC,CAAC;IACpB;EAEJ,CAAC;EACD;EACApB,SAAS,CAAC,MAAM;IAAEW,UAAU,CAAC,QAAQ,CAAC;EAAE,CAAC,EAAE,EAAE,CAAC;EAC9CM,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC;EAErB,oBACIrB,OAAA,CAACC,cAAc,CAACC,QAAQ;IAAC2B,KAAK,EAAE;MAAEvB,QAAQ;MAAEc,GAAG;MAAEC,QAAQ;MAAEZ,UAAU;MAAEc;IAAY,CAAE;IAAAlB,QAAA,EAChFA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACa;AAIlC,CAAC;AAAA7B,EAAA,CAjDYF,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAkDrB,eAAeD,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}